set.seed(1)
x=matrix(rnorm(20*2), ncol = 2)
y=c(rep(-1, 10), rep(1,10))
x[y==1,]=x[y==1,] + 1
plot(x, col=(3-y))
dat = data.frame(x=x, y=as.factor(y))
library(e1071)
svmfit=svm(y~., data=dat, kernel="linear",
cost=10,scale=FALSE)
plot(svmfit , dat,grid=100,color.palette =
terrain.colors,xlim=c(-2.1,2.5),ylim=c(-1.3,2.6))
svmfit$index
summary(svmfit)
svmfit=svm(y~., data=dat, kernel="linear", cost=0.1,
scale=FALSE)
plot(svmfit , dat,grid=100,color.palette = terrain.colors)
svmfit$index
set.seed(1)
tune.out=tune(svm,y~.,data=dat,kernel="linear",
ranges=list(cost=c(0.001, 0.01, 0.1, 1,5,10,100)))
summary(tune.out)
bestmod=tune.out$best.model
summary(bestmod)
View(bestmod)
library(h2o)
h2o.init(nthreads = -1)
data=read.csv("customer_churn.csv", stringsAsFactors=TRUE)
head(data)
str(data)
plot(density(data$tenure[data$Churn=="Yes"]),
col="firebrick1",lwd=3,main="", xlab="tenure variable, i.e.
number of months the customer is with the company")
lines(density(data$tenure[data$Churn=="No"]),
col="dodgerblue1",lwd=3)
grid()
legend(40, 0.04, legend=c("Churned", "Stayed"),
col=c("firebrick1", "dodgerblue1"),cex=1.2,lty=1)
plot(density(data$MonthlyCharges[data$Churn=="Yes"]),col="red",
lwd=3,main="",xlab="MonthlyCharges variable",ylim=c(0,0.02))
lines(density(data$MonthlyCharges[data$Churn=="No"]),col="blue",lwd=3)
grid()
legend(100, 0.02, legend=c("Stayed", "Churned"),col=c("red",
"blue"),cex=0.8,lty=1)
data[,"customerID"]=NULL
library(caret)
idx.train = createDataPartition(y = data$Churn, p = 0.8, list =
FALSE)
data$Churn = as.factor(data$Churn)
train = data[idx.train, ]
test = data[-idx.train, ]
h2o_train=as.h2o(train)
h2o_test=as.h2o(test)
dl_model = h2o.deeplearning(x = names(h2o_train[,1:19]),
y = "Churn",
training_frame = h2o_train,
activation="Tanh",
hidden = c(10),
loss = "CrossEntropy",
score_each_iteration=TRUE,
epochs = 10000,
rate=0.01,
balance_classes=F,
adaptive_rate = F,
stopping_rounds=0)
plot(dl_model)
dl_model = h2o.deeplearning(x = names(h2o_train[,1:19]),
y = "Churn",
training_frame = h2o_train,
activation="Tanh",
hidden = c(20, 20, 20),
loss = "CrossEntropy",
score_each_iteration=TRUE,
epochs = 10000,
rate=0.01,
balance_classes=F,
adaptive_rate = F,
stopping_rounds=0,
l1 = 0,
l2 = 0.01)
plot(dl_model)
